taxonomy.name = Taxonomies
taxonomy.entityname = Taxonomy
taxonomy.windowtitle = Taxonomy Editor

detailstab.title = Details
detailstab.uuid = Identifier
detailstab.name = Name
detailstab.desc = Description
detailstab.owner = Owner 
detailstab.whichsource = What type of data source will terms be retrieved from?

detailstab.supplyname = You must specify a name for this taxonomy.
detailstab.noowner = No owner has been selected for this taxonomy.
detailstab.nodatasource = You must choose a data source.

internal.choicetitle = Locally Defined Terms
internal.choicedescription = Use terms that are defined and associated with this taxonomy.  See the <b>Terms</b> tab to add or modify terms.
internal.allownewterms = Allow end-users to add new terms during contribution
internal.tab.title = Terms
internal.tab.mustbesaved = Terms cannot be added until the taxonomy has been saved.  
internal.tab.immediatechanges = <html><b>IMPORTANT:</b> Changes made on this tab will take effect immediately, even if you do not choose to save the taxonomy.  There is no way to automatically revert changes made on this tab.
internal.tab.siblingwithsamename.message = A sibling term with the same term name has been found.  Aborting.
internal.tab.siblingwithsamename.title = Duplicate Term
internal.tab.termtree.validation.length = Term name length must be less than 150 characters
internal.tab.termtree.validation.illegalcharacter = Term name can only contain letters, digits, hyphens, underscores, colons, semicolons, commas and periods
internal.tab.termeditor.name = Term Name
internal.tab.termeditor.datatitle = Data associated with this term
internal.tab.termeditor.newdata.title = Add a new data key
internal.tab.termeditor.newdata.instructions = Choose from the below pre-determined data keys, or enter your own custom data key:
internal.tab.termeditor.newdata.custom = Custom data key:
internal.tab.termeditor.newdata.validation.title = Invalid Custom Key
internal.tab.termeditor.newdata.validation.empty = You must specify a value for the custom key
internal.tab.termeditor.newdata.validation.inuse = The custom key you have entered is already in use for this term

internal.tab.termeditor.newdata.longdata.name = HTML Fragment
internal.tab.termeditor.newdata.longdata.description = HTML fragment displayed in EQUELLA during term selection in the Pop-up Browser

sql.choicetitle = SQL Data Source
sql.choicedescription = Query a SQL database for terms.  See the SQL Details tab.
sql.tab.title = SQL Details

sql.tab.queryname.GET_TERM = Get term
sql.tab.querydesc.GET_TERM = <b>Return additional term information for the given full term.</b><br><br>\
<b>Named Parameter</b>\: <b>\:term</b> - the full term including lineage. <b>\:uuid</b> - the UUID of term record<br><br>\
<b>Result</b>\: Exactly one results, or zero results if term not found.<br><br>\
<b>Result Columns</b>\: <b>term</b> for the term value, <b>uuid</b> (optional) for UUID, <b>fullterm</b> for the term value including lineage and <b>isleaf</b> as a boolean (true/false/0/1). 

sql.tab.queryname.GET_CHILD_TERMS = Get child terms
sql.tab.querydesc.GET_CHILD_TERMS = <b>Return any child nodes for a given term.</b><br><br>\
<b>Named Parameter</b>\: <b>\:parentTerm</b> - the parent term (including lineage), or blank for root terms. <b>\:uuid</b> - the UUID of term.<br><br>\
<b>Result Columns</b>\: <b>term</b> for the term value, <b>uuid</b> (optional) for UUID, <b>fullterm</b> for the term value including lineage and <b>isleaf</b> as a boolean (true/false/0/1).

sql.tab.queryname.GET_DATA_FOR_TERM = Get data for term
sql.tab.querydesc.GET_DATA_FOR_TERM = <b>Return any text data for a key/value pair on a term.</b><br><br>\
<b>Named Parameters</b>\: <b>\:term</b> - the term (including lineage), <b>\:uuid</b> - the UUID, <b>\:dataKey</b> - the key for the requested value<br><br>\
<b>Result</b>\: If no data, then zero results.  Otherwise, exactly one result with one column (any name) containing the data.

sql.tab.queryname.GET_ALL_DATA_FOR_TERM = Get all data for term
sql.tab.querydesc.GET_ALL_DATA_FOR_TERM =  <b>Return a list of key/value pair on a term.</b><br><br>\
<b>Named Parameters</b>\: <b>\:uuid</b> - the UUID<br><br>\
<b>Result</b>\: If no data, then empty list.  Otherwise, a list of key/value pair.

sql.tab.queryname.SEARCH_TERMS_ANY = Search all terms
sql.tab.querydesc.SEARCH_TERMS_ANY = <b>Return the first 50 terms that match the given query string for the full term path.</b><br><br>\
<b>Named Parameters</b>\: <b>\:searchQuery</b> - the query string from the user containing % wild-cards.  It is expected to be used as part of a LIKE clause. <b>\:limit</b> the maximum number of results that should be returned<br><br>\
<b>Result Columns</b>\: <b>term</b> for the term value, <b>uuid</b> (optional) for the UUID, <b>fullterm</b> for the term value including lineage and <b>isleaf</b> as a boolean (true/false/0/1).

sql.tab.queryname.COUNT_TERMS_ANY = Count all terms
sql.tab.querydesc.COUNT_TERMS_ANY = <b>Return the total number of terms that match the given query string for the full term path.</b><br><br>\
<b>Named Parameter</b>\: <b>\:searchQuery</b> - the query string from the user containing % wild-cards.  It is expected to be used as part of a LIKE clause.<br><br>\
<b>Result</b>\: A single row and column with a number.

sql.tab.queryname.SEARCH_TERMS_LEAVES = Search leaf terms
sql.tab.querydesc.SEARCH_TERMS_LEAVES = <b>Return the first 50 leaf terms that match the given query string for the full term path.</b><br><br>\
<b>Named Parameters</b>\: <b>\:searchQuery</b> - the query string from the user containing % wild-cards.  It is expected to be used as part of a LIKE clause. <b>\:limit</b> the maximum number of results that should be returned<br><br>\
<b>Result Columns</b>\: <b>term</b> for the term value, <b>uuid</b> (optional) for the UUID, <b>fullterm</b> for the term value including lineage and <b>isleaf</b> as a boolean (true/false/0/1).

sql.tab.queryname.COUNT_TERMS_LEAVES = Count leaf terms
sql.tab.querydesc.COUNT_TERMS_LEAVES = <b>Return the total number of leaf terms that match the given query string for the full term path.</b><br><br>\
<b>Named Parameter</b>\: <b>\:searchQuery</b> - the query string from the user containing % wild-cards.  It is expected to be used as part of a LIKE clause.<br><br>\
<b>Result</b>\: A single row and column with a number.

sql.tab.queryname.SEARCH_TERMS_TOPLEVEL = Search top-level terms
sql.tab.querydesc.SEARCH_TERMS_TOPLEVEL = <b>Return the first 50 top-level terms that match the given query string for the full term path.</b><br><br>\
<b>Named Parameters</b>\: <b>\:searchQuery</b> - the query string from the user containing % wild-cards.  It is expected to be used as part of a LIKE clause. <b>\:limit</b> the maximum number of results that should be returned<br><br>\
<b>Result Columns</b>\: <b>term</b> for the term value, <b>uuid</b> (optional) for the UUID, <b>fullterm</b> for the term value including lineage and <b>isleaf</b> as a boolean (true/false/0/1).

sql.tab.queryname.COUNT_TERMS_TOPLEVEL = Count top-level terms
sql.tab.querydesc.COUNT_TERMS_TOPLEVEL = <b>Return the total number of top-level terms that match the given query string for the full term path.</b><br><br>\
<b>Named Parameter</b>\: <b>\:searchQuery</b> - the query string from the user containing % wild-cards.  It is expected to be used as part of a LIKE clause.<br><br>\
<b>Result</b>\: A single row and column with a number.

wizard.termselector.title = Term Selector
wizard.termselector.taxonomy = Taxonomy
wizard.termselector.taxonomy.pleasechoose = <choose a taxonomy>
wizard.termselector.multiple = Allow multiple terms to be selected
wizard.termselector.addterm = Allow end-users to create new terms
wizard.termselector.storage = When saving selected terms:
wizard.termselector.storage.full = Store full path, e.g. Mammalia\\Felidae\\Panthera\\Tiger
wizard.termselector.storage.leaf = Store only the selected term, e.g. Tiger
wizard.termselector.usage = When searching selected terms:
wizard.termselector.usage.full = Search full path, e.g. Mammalia\\Felidae\\Panthera\\Tiger
wizard.termselector.usage.leaf = Search only the selected term, e.g. Tiger
wizard.termselector.restriction = Restrict term selection to:
wizard.termselector.restriction.toplevel = Top-level terms only
wizard.termselector.restriction.leaf = Leaf terms only
wizard.termselector.restriction.none = Any term - no restrictions
wizard.termselector.displaytypes = Display the taxonomy using the following control:
wizard.termselector.taxonomy.notselected = You must select a Taxonomy
wizard.termselector.taxonomy.nodisplayselected = You must select a display type

wizard.popupBrowser.title = Detailed Pop-up Browser
wizard.popupBrowser.description = This is similar to the Wide Pop-up Browser except that it dedicates the right-side of the browser to showing details associated with a selected term.
wizard.popupBrowser.mode = Allow users to navigate the taxonomy by: 
wizard.popupBrowser.browseMode = Browsing
wizard.popupBrowser.searchMode = Searching

wizard.widePopupBrowser.title = Wide Pop-up Browser
wizard.widePopupBrowser.description = This is similar to the Detailed Pop-up Browser except that it fills the entire screen width.  This is especially well suited for very long terms.

wizard.autocompleteEditBox.title = Auto-Complete Edit Box
wizard.autocompleteEditBox.description = This control works well for shallow taxonomies where searching is the best way of finding terms.  It is also the best method for allowing users to add new terms to a taxonomy during contribution.
wizard.autocompleteEditBox.reloadOnTermSelection = Reload page on term selection

/security.privilege.TAXONOMY.EDIT_TAXONOMY = edit this taxonomy
/security.privilege.TAXONOMY.DELETE_TAXONOMY = delete this taxonomy

